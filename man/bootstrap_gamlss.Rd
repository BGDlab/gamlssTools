% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bootstrapping.R
\name{bootstrap_gamlss}
\alias{bootstrap_gamlss}
\title{Bootstrap GAMLSS Models}
\usage{
bootstrap_gamlss(
  gamlssModel,
  df = NULL,
  B = 100,
  type = c("resample", "bayes", "LOSO"),
  stratify = FALSE,
  group_var = NULL
)
}
\arguments{
\item{gamlssModel}{gamlss model object}

\item{df}{dataframe used to fit \code{gamlssModel}. If \code{NULL}, will try to read from \code{gamlssModel} object}

\item{B}{number of samples/models to bootstrap. Defaults to 100. if \code{type = "LOSO"}, B will be updated to
the number of unique values of \code{group_var}}

\item{type}{which type of bootstrapping to perform. \code{resample} performs traditional bootstrapping (resample with replacement)
across all groups; alternatively, it may be combined with \code{stratify=TRUE} and \code{group_var} args below to bootstrap
while maintaining each group's (e.g study's) n. \code{bayes} keeps the original dataframe but randomizes each observation's
weight. \code{LOSO} drops an entire subset from the sample (indicated by \code{group_var}) with each bootstrap.}

\item{stratify}{logical. with \code{type=resample} will bootstrap within each level of \code{group_var}. Can also be a list, allowing
stratification within multiple groups e.g. \code{group_var=c(sex, study)}}

\item{group_var}{categorical/factor variable that resampling will be stratified within (when \code{type=resample})
or that one level will be dropped from in each bootstraped sample (when \code{type=LOSO})}
}
\value{
list of gamlss model objects
}
\description{
Refits GAMLSS model on bootstrapped samples
}
\details{
Performs bootstrap resampling on dataframe B times and then refits gamlss model.
Performs regular bootstrapping, bayesian boostrapping (varies weights, as in gamlss::centiles.boot),
bootstrapping stratified within a group variable, or leave-one-group-out.
Code pulls heavily from gamlss::centiles.boot() and gamlss.foreach::BayesianBoot().
}
\examples{
iris_model <- gamlss(formula = Sepal.Width ~ Sepal.Length + Species, sigma.formula = ~ Sepal.Length, data=iris)
bootstrap_gamlss(iris_model, df=iris, type="resample", stratify=TRUE, group_var="Species")

#add another random factor to the iris dataset
new_iris <- iris \%>\% mutate(Region = sample(c("north", "south", "east", "west"), size=nrow(iris), replace=TRUE))
iris_model2 <- gamlss(formula = Sepal.Width ~ Sepal.Length + Species + Region, sigma.formula = ~ Sepal.Length, data=new_iris)

}
