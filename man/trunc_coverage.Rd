% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gamlss_helper_funs.R
\name{trunc_coverage}
\alias{trunc_coverage}
\title{Truncate by Coverage}
\usage{
trunc_coverage(df, vars, breaks = 20, n_min = 5, max_loops = 10)
}
\arguments{
\item{df}{dataframe}

\item{vars}{a variable name or list of variable names for which coverage will be tested}

\item{breaks}{number of groups to split vars into. Defaults to 20 to match default gamlss:::pb.control(inter=20)}

\item{n_min}{minimum number of points required in the first/last groups. Default is 5.}

\item{max_loops}{number of times to resplit and check coverage. Default is 10}
}
\value{
updated dataframe df
}
\description{
Remove data points at either end of 1+ variable's range(s) that have sparse coverage
}
\details{
Iteratively breaks data into even groups along one or more variable's ranges, then
removes the first and/or last group if the number of datapoints in that group fail to
meet a certain threshold. Can be useful for dealing with boundary effects in gamlss:::pb(),
for example, which places knots evenly along the x axis (rather than by quantiles)
and might have issues if the high and/or low ends of x don't have adequate coverage.
Made into function with help from GPT.
}
\examples{
outliers <- data.frame(
Sepal.Length = sample(iris$Sepal.Length, 3),  # Randomly chosen normal values
Sepal.Width = c(11, 8, 6),  
Petal.Length = c(10, 12, 14),  # Extreme values
Petal.Width = sample(iris$Petal.Width, 3),  
Species = factor(c("setosa", "versicolor", "virginica"))  # Random species
)

# Combine with the original dataset
iris_outlier <- rbind(iris, outliers)

iris_clean <- trunc_coverage(iris_outlier, vars=c("Sepal.Width", "Petal.Length"))

}
