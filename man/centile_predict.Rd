% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/centile_fan_helper_funs.R
\name{centile_predict}
\alias{centile_predict}
\title{Predict centiles}
\usage{
centile_predict(
  gamlssModel,
  sim_df_list,
  x_var,
  desiredCentiles = c(0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95, 0.99),
  df = NULL,
  average_over = FALSE,
  get_peaks = TRUE,
  resid_terms = NULL
)
}
\arguments{
\item{gamlssModel}{gamlss model object}

\item{sim_df_list}{list of simulated dataframes returned by \code{sim_data()}}

\item{x_var}{continuous predictor (e.g. 'age'), which \code{sim_df_list} varies over}

\item{desiredCentiles}{list of percentiles as values between 0 and 1 that will be
calculated and returned. Defaults to c(0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95, 0.99),
which returns the 1st percentile, 5th percentile, 10th percentile, etc.}

\item{df}{(optional) original dataframe from which new data will be simulated. Passing this can
fix some bugs in \code{\link[gamlss:predict.gamlss]{gamlss::predictAll()}}}

\item{average_over}{logical indicating whether to return percentiles and
peaks averaged across multiple levels of a factor, with each level represented as
a dataframe in \code{sim_df_list}. Defaults to \code{FALSE}}

\item{get_peaks}{logical to indicate whether to return median's max value over x.
Defaults to \code{TRUE}.}
}
\value{
list of dataframes containing predicted centiles across range of predictors
}
\description{
\code{centile_predict} calculates y values for a range of centiles across simulated data
}
\details{
This function takes a list of dataframes simulated with \code{\link[=sim_data]{sim_data()}} and calculates
the values of the response variable for each precentile in a list. Users can return
predicted values for each level of a factor variable or choose to average across these
values. Can also calculate and return the peak median (0.5) value of y across predictor
\code{x_var}. Calls \code{\link[=pred_centile]{pred_centile()}} as a subfunction.
}
\examples{
iris_model <- gamlss(formula = Sepal.Width ~ Sepal.Length + Species, sigma.formula = ~ Sepal.Length, data=iris, family=BCCG)
sim_df <- sim_data(iris, "Sepal.Length", "Species", iris_model)

#to average across levels of "Species"
centile_predict(iris_model, sim_df, "Sepal.Length", average_over = TRUE)

# or say you just want the 25th, 50th (median), and 75th percentiles
centile_predict(iris_model, sim_df, "Sepal.Length", desiredCentiles = c(0.25, 0.5, 0.75))

}
