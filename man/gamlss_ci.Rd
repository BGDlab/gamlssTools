% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bootstrapping.R
\name{gamlss_ci}
\alias{gamlss_ci}
\title{Bootstrap Confidence Intervals}
\usage{
gamlss_ci(
  boot_list,
  x_var,
  factor_var = NULL,
  special_term = NULL,
  moment = c("mu", "sigma"),
  interval = 0.95,
  ci_type = c("pointwise", "sliding", "simultaneous"),
  df = NULL,
  sim_data_list = NULL,
  average_over = FALSE
)
}
\arguments{
\item{boot_list}{output of gamlssTools::bootstrap_gamlss()}

\item{x_var}{numeric variable to plot confidence intervals across}

\item{factor_var}{categorical variable, CIs will be calculated separately at each level.}

\item{special_term}{optional, passed to gamlssTools::sim_data()}

\item{moment}{what moment to get CIs for. \code{mu} returns CIs around 50th centile, \code{sigma} returns predicted
value of sigma (with link-function applied)}

\item{interval}{size of confidence interval to calculate. Defaults to 0.95, or 95\%}

\item{ci_type}{options for type of precentile CI to return. \code{pointwise} (default) calculates percentiles at 500 points
along \code{x_var}. \code{sliding} does the same with a sliding window. \code{simultaneous} implements simultaneous CIs along \code{x_var}
as described in Gao et al (doi: 10.3390/sym13071212).}

\item{df}{true dataframe (optional, must pass this or \code{sim_data_list})}

\item{sim_data_list}{data simulated from true dataframe (optional, must pass this or \code{df})}

\item{average_over}{logical indicating whether to average predicted centiles across each level of \code{factor_var}.
Defaults to \code{FALSE}, which will plot a different colored centile fan for each level of \code{factor_var}.}
}
\value{
list of dataframes, with one dataframe for each level of \code{factor_var}
}
\description{
Uses bootstrapped gamlss models to calculate CIs
}
\details{
Takes output of gamlssTools::bootstrap_gamlss() and uses them to calculate confidence intervals for
the 50th percentiles OR sigma across the range of \code{x_var}.
}
\examples{
iris_model <- gamlss(formula = Sepal.Width ~ Sepal.Length + Species, sigma.formula = ~ Sepal.Length, data=iris)
boot_out <- bootstrap_gamlss(iris_model, df=iris, type="resample", stratify=TRUE, group_var="Species")
gamlss_ci(boot_out, "Sepal.Length", "Species", df=iris)

}
