% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotting_functions.R
\name{plot_sigma}
\alias{plot_sigma}
\title{Plot sigma}
\usage{
plot_sigma(
  gamlssModel,
  df,
  x_var,
  color_var = NULL,
  get_peaks = TRUE,
  x_axis = c("custom", "lifespan", "log_lifespan", "lifespan_fetal",
    "log_lifespan_fetal"),
  average_over = FALSE,
  sim_data_list = NULL,
  ...
)
}
\arguments{
\item{gamlssModel}{gamlss model object}

\item{df}{dataframe used to fit the gamlss model}

\item{x_var}{continuous predictor (e.g. 'age') that will be plotted on the x axis}

\item{color_var}{(optional) categorical predictor (e.g. 'sex') that will be used to determine the color of
points/centile lines. Alternatively, you can average over each level of this variable
to return a single set of centile lines (see \code{average_over}).}

\item{get_peaks}{logical to indicate whether to add a point at the median centile's peak value}

\item{x_axis}{optional pre-formatted options for x-axis tick marks, labels, etc. Defaults to 'custom',
which is, actually, no specific formatting. NOTE: options "lifespan" and "log_lifespan" assume that
age is formatted in days post-birth. if age is formatted in days post-conception
(i.e. age post-birth + 280 days), use options ending in "_fetal".}

\item{average_over}{logical indicating whether to average predicted centiles across each level of \code{color_var}.
Defaults to \code{FALSE}, which will plot a different colored centile fan for each level of \code{color_var}.}

\item{sim_data_list}{optional argument that takes the output of \code{sim_data()}. Can be useful when you're plotting
many models fit on the same dataframe}
}
\value{
list of dataframes containing predicted sigma across range of predictors
}
\description{
Calculates and plots predicted sigma values across simulated data
}
\details{
This function takes a list of dataframes simulated with \code{\link[=sim_data]{sim_data()}} and calculates
the value of sigma (after link function is applied) as a way to visualize variability.
Calls subfunction \code{sigma_predict()}.
}
\examples{
iris_model <- gamlss(formula = Sepal.Width ~ Sepal.Length + Species, sigma.formula = ~ Sepal.Length + Species, data=iris, family=BCCG)
plot_sigma(iris_model, iris, "Sepal.Length", "Species", average_over = TRUE)
plot_sigma(iris_model, iris, "Sepal.Length", "Species", average_over = FALSE)

}
