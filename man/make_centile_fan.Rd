% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/centile_fans.R
\name{make_centile_fan}
\alias{make_centile_fan}
\title{Plot centile fan using ggplot}
\usage{
make_centile_fan(
  gamlssModel,
  df,
  x_var,
  color_var = NULL,
  get_peaks = TRUE,
  x_axis = c("custom", "lifespan", "log_lifespan", "lifespan_fetal",
    "log_lifespan_fetal"),
  desiredCentiles = c(0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95, 0.99),
  average_over = FALSE,
  sim_data_list = NULL,
  show_points = TRUE,
  label_centiles = c("label", "legend", "none"),
  remove_point_effect = NULL,
  color_manual = NULL,
  get_derivs = FALSE,
  y_scale = NULL,
  ...
)
}
\arguments{
\item{gamlssModel}{gamlss model object}

\item{df}{dataframe used to fit the gamlss model}

\item{x_var}{continuous predictor (e.g. 'age') that will be plotted on the x axis}

\item{color_var}{(optional) categorical predictor (e.g. 'sex') that will be used to determine the color of
points/centile lines. Alternatively, you can average over each level of this variable
to return a single set of centile lines (see \code{average_over}).}

\item{get_peaks}{logical to indicate whether to add a point at the median centile's peak value}

\item{x_axis}{optional pre-formatted options for x-axis tick marks, labels, etc. Defaults to 'custom',
which is, actually, no specific formatting. NOTE: options "lifespan" and "log_lifespan" assume that
age is formatted in days post-birth. if age is formatted in days post-conception
(i.e. age post-birth + 280 days), use options ending in "_fetal".}

\item{desiredCentiles}{list of percentiles as values between 0 and 1 that will be
calculated and returned. Defaults to c(0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95, 0.99),
which returns the 1st percentile, 5th percentile, 10th percentile, etc.}

\item{average_over}{logical indicating whether to average predicted centiles across each level of \code{color_var}.
Defaults to \code{FALSE}, which will plot a different colored centile fan for each level of \code{color_var}.}

\item{sim_data_list}{optional argument that takes the output of \code{sim_data()}. Can be useful when you're plotting
many models fit on the same dataframe}

\item{show_points}{logical indicating whether to plot data points below centile fans. Defaults to \code{TRUE}}

\item{label_centiles}{label the percentile corresponding to each centile line(\code{label}), map thickness in legend(\code{legend}), or neither(\code{none}).
Defaults to \code{label}.}

\item{remove_point_effect}{logical indicating whether to correct for the effect of a variable (such as study) in the plot. Defaults to \code{FALSE}.}

\item{color_manual}{optional arg to specify color for points and centile fans. Will override \code{color_var}. Takes hex color codes or color names (e.g. "red")}

\item{get_derivs}{plot 1st derivative of centile lines instead of the centile lines themselves}

\item{y_scale}{function to be applied to dependent variable (y axis)}
}
\value{
ggplot object
}
\description{
\code{make_centile_fan} takes a gamlss model and creates a basic centile fan for it in ggplot
}
\details{
The resulting ggplot object can be further modified as needed (see example). There are several built-in formatting
options for the x-axis that can be accessed using the \code{x_axis} argument. Alternatively, the default value of 'custom'
will allow you to further adjust the formatting of the resulting ggplot object yourself, as usual. Can also be used
to plot 1st derivative of centile lines using \code{plot_deriv} argument. You can save
time when plotting the same model with multiple aes() values or multiple models fit on the same data/predictors
by first running \code{\link[=sim_data]{sim_data()}} and supplying the output to arg \code{sim_data_list}.
}
\examples{
iris_model <- gamlss(formula = Sepal.Width ~ Sepal.Length + Species, sigma.formula = ~ Sepal.Length, data=iris, family=BCCG)
iris_fan_plot <- make_centile_fan(iris_model, iris, "Sepal.Length", "Species")

#print as-is
print(iris_fan_plot)

#or make the axes and legends prettier
iris_fan_plot + 
 labs(title="Normative Sepal Width by Length",
 x ="Sepal Length", y = "Sepal Width",
 color = "Species", fill="Species")
 
#add facets
iris_fan_plot + facet_wrap(~Species)
#################################
#conditioning time 2 model on time 1 -> residualize point effects
iris$Sepal.Width_t2 <- iris$Sepal.Width  + rnorm(nrow(iris), mean = 0.1, sd = 0.05)
iris_model_long <- gamlss(formula = Sepal.Width_t2 ~ Sepal.Width + Sepal.Length + re(random=~1|Species), 
sigma.formula = ~ Sepal.Length, data=iris, family=BCCG)

#Looks bad:
make_centile_fan(iris_model_long, iris, "Sepal.Length", "Species", desiredCentiles=c(0.05, .5, 0.95))

#Looks good:
make_centile_fan(iris_model_long, iris, "Sepal.Length", "Species", remove_point_effect = "Sepal.Width", desiredCentiles=c(0.05, .5, 0.95))

#################################
#simulate a dataframe to use x_axis options
df <- data.frame(
 Age = sample(0:36525, 10000, replace = TRUE),
 Sex = sample(c("Male", "Female"), 10000, replace = TRUE),
 Study = factor(sample(c("Study_A", "Study_B", "Study_C"), 10000, replace = TRUE)))

df$log_Age <- log(df$Age, base=10)
df$Pheno <- ((df$Age)/365)^3 + rnorm(10000, mean = 0, sd = 100000)
df$Pheno <- scales::rescale(df$Pheno, to = c(1, 10))

#fit gamlss model
pheno_model <- gamlss(formula = Pheno ~ pb(Age) + Sex + random(Study), sigma.formula= ~ pb(Age), data = df, family=BCCG)

make_centile_fan(pheno_model, df, "Age", "Sex", x_axis="lifespan")

#average over each sex and choose color
make_centile_fan(pheno_model, df, "Age", "Sex", average_over=TRUE, x_axis="lifespan", color_manual="#4B644BFF")

}
